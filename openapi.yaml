openapi: 3.0.0
servers: []
info:
  description: ''
  version: 1.0.0
  title: CloudMusic API
  termsOfService: 'https://krypton.dev/terms/'
  contact:
    email: cloudmusic@krypton.dev
  license:
    name: MIT
tags: 
  - name: playlist
  - name: folder
  - name: song
  - name: account
paths:
  /playlists:
    get:
      summary: Receive the current user playlists
      tags: ['playlist']
      responses:
        '200':
          description: List of playlists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
  /playlist:
    post:
      summary: Create a new playlist
      tags: ['playlist']
      responses:
        '200':
          description: Playlist created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlist'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
        required: true
        description: The playlist which should get created.
  /playlist/{playlistId}:
    get:
      summary: Get the content of the playlist
      tags: ['playlist']
      parameters:
        - in: path
          name: playlistId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Information about the playlist and all songs
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlist:
                    $ref: '#/components/schemas/Playlist'
                  songs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Song'
    delete:
      summary: Removes the specified playlist
      tags: ['playlist']
      parameters:
        - in: path
          name: playlistId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Playlist was deleted.
    patch:
      summary: Edit the playlist
      tags: ['playlist']
      parameters:
        - in: path
          name: playlistId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlist'
      responses:
        '200':
          description: Playlist was edited.
    post:
      summary: Add a song to the playlist
      tags: ['playlist']
      parameters:
        - in: path
          name: playlistId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                songId: 
                  type: string
      responses:
        '200':
          description: Song added
  /folder:
    post:
      summary: Create a new folder
      tags: ['folder']
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
      responses:
        '200':
          description: Playlist created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
  /folder/{folderId}:
    post:
      summary: Add a playlist to the given folder
      tags: ['folder']
      parameters:
        - in: path
          name: folderId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                playlistId:
                  type: string
      responses:
        '200':
          description: The playlist was added successfully.
    patch:
      summary: Change the folder
      tags: ['folder']
      parameters:
        - in: path
          name: folderId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Folder'
      responses:
        '200':
          description: The folder was edited.
    delete:
      summary: Delete the folder. If the folder has children they will be deleted too.
      tags: ['folder']
      parameters:
        - in: path
          name: folderId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The folder was deleted.
  /folders:
    get:
      summary: Get a list of all folders
      tags: ['folder']
      responses:
        '200':
          description: A list of all folders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
  /song/{songId}:
    get:
      summary: Download the song by the given id
      tags: ['song']
      parameters:
        - in: path
          name: songId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The song in mp3 format
          content:
              audio/mpeg:
                schema: 
                  type: string
                  format: binary
    put:
      summary: Uploads the song itself
      tags: ['song']
      parameters:
        - in: path
          name: songId
          required: true
          schema:
            type: string
      requestBody:
        content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      responses:
        '200':
          description: The song was uploaded successfully
    patch:
      summary: Update the song.
      tags: ['song']
      parameters:
        - in: path
          name: songId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        '200':
          description: The song was updated.
    delete:
      summary: Removes the specified song.
      tags: ['song']
      parameters:
        - in: path
          name: songId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Song was deleted
  /song:
    post:
      summary: Create a new song. After creating a song a put request with the file is expected, if this doesn't happen the song will get deleted automatically.
      tags: ['song']
      responses:
        '200':
          description: Song was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Song'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
  /login:
    post:
      summary: Try login a user
      tags: ['account']
      responses:
        '200':
          description: 'Provided login details are correct, and the user object is returned'
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '403':
          description: Invalid login details provided
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
        required: true
      security: []
  /register:
    put:
      summary: Creates a new user account
      tags: ['account']
      responses:
        '201':
          description: 'Account created successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '200':
          description: 'Account couldnt be created.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
      security: []
components:
  schemas:
    Playlist:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        folderId:
          type: string
        createdAt:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: string
        displayName:
          type: string
    Song:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        artists:
          type: array
          items:
            type: string
        duration:
          type: number
          description: 'in seconds'
        cover:
          type: string
          description: 'id of the cover art'
    Folder:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        parentFolder:
          type: string
  securitySchemes:
    cloudmusic_auth:
      type: apiKey
      name: api_key
      in: header
  links: {}
  callbacks: {}
security:
  - cloudmusic_auth: []
